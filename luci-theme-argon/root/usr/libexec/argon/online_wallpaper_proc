#!/bin/bash
# author jjm2473

# the script will be excuted when `argon.@global[0].bing_background == '1'`
# defaults to 'bing' to be compatible with old config
WEB_PIC_SRC=$(uci -q get argon.@global[0].online_wallpaper || echo 'bing')
# For now, the next two variables are used for wallhaven.cc with specified Tag ID
# API_KEY if user has an account with wallhaven and want to use their apikey to allow for more images
# EXACT_RESO is used for exact resolution by default, if not use 'atleast' instead of 'resolutions'
API_KEY=$(uci -q get argon.@global[0].use_api_key)
EXACT_RESO=$(uci -q get argon.@global[0].use_exact_resolution || echo '1')
CACHE=/var/run/argon_${WEB_PIC_SRC}.url
WRLOCK=/var/lock/argon_${WEB_PIC_SRC}.lock
CURL_MAXTIME=30
BACKGROUND_IMG_PATH='/www/luci-static/argon/img/'
RESOLUTION_X='2560'
RESOLUTION_Y='1440'
REFRESH_INTERVAL_SEC=$((15 * 60))
REFRESH_INTERVAL_FLAG_F='/var/run/argon_refresh_time.flag'
MAST_REFRESH_FLAG=0


function fetch_pic_url() {
    case ${WEB_PIC_SRC} in
    bing)
        declare picpath
        picpath=$(curl -fks --max-time ${CURL_MAXTIME} \
            "https://www.bing.com/HPImageArchive.aspx?format=js&n=1&uhd=1" |
            jsonfilter -qe '@.images[0].url')
        [[ -n "${picpath}" ]] && echo "//www.bing.com${picpath}" | sed "s/w=[0-9]*/${RESOLUTION_X}/g" | sed "s/h=[0-9]*/${RESOLUTION_Y}/g"
        ;;
    unsplash)
        # fix from https://github.com/sbwml/luci-theme-argon
        if [[ -z "${API_KEY}" ]]; then
            curl -fks --max-time ${CURL_MAXTIME} \
                --header "Authorization: Client-ID kmFIroj2ELqXJPtC0XUoyww-Tr_lDU8Ho8uxjptIrCo" \
                "https://api.unsplash.com/photos/random?count=1&orientation=landscape" |
                jsonfilter -e "@[0]['urls']['regular']"
        else
            curl -fks --max-time ${CURL_MAXTIME} \
                "https://api.unsplash.com/photos/random?client_id=${API_KEY}" |
                jsonfilter -qe '@["urls"]["regular"]'
        fi
        ;;
    unsplash_*)
        local collection_id=${WEB_PIC_SRC#unsplash_}
        if [[ -z "${API_KEY}" ]]; then
            curl -fks --max-time ${CURL_MAXTIME} \
                "https://source.unsplash.com/collection/${collection_id}/${RESOLUTION_X}x${RESOLUTION_Y}" |
                sed -E 's#^.*href="([^?]+)\?.*$#\1?fm=jpg\&fit=crop\&w='"${RESOLUTION_X}"'\&h='"${RESOLUTION_Y}"'#'
        else
            curl -fks --max-time ${CURL_MAXTIME} \
                "https://api.unsplash.com/photos/random?client_id=${API_KEY}&collections=${collection_id}" |
                jsonfilter -qe '@["urls"]["regular"]'
        fi
        ;;
    wallhaven)
        curl -fks --max-time ${CURL_MAXTIME} \
            "https://wallhaven.cc/api/v1/search?resolutions=${RESOLUTION_X}x${RESOLUTION_Y}&sorting=random" |
            jsonfilter -qe '@.data[0].path'
        ;;
    wallhaven_*)
        local tag_id=${WEB_PIC_SRC#wallhaven_}
        local has_api_key=""
        [[ -n "${API_KEY}" ]] && has_api_key="apikey=${API_KEY}" || has_api_key=""
        local use_reso="resolutions"
        [[ "${EXACT_RESO}" -eq "1" ]] && use_reso='resolutions' || use_reso='atleast'
        curl -fks --max-time ${CURL_MAXTIME} \
            "https://wallhaven.cc/api/v1/search?${has_api_key}q=id%3A${tag_id}&${use_reso}=${RESOLUTION_X}x${RESOLUTION_Y}&sorting=random" |
            jsonfilter -qe '@.data[0].path'
        ;;
    esac
}

function try_update() {
    local lock="${WRLOCK}"
    exec 200>"${lock}"

    rm -rf "${CACHE}"

    if flock -n 200 >/dev/null 2>&1; then
        declare picurl
        picurl=$(fetch_pic_url)
        if [[ "${WEB_PIC_SRC}" == wallhave* ]] ; then
            curl -fks --max-time ${CURL_MAXTIME} --url "${picurl}" > /dev/null
        fi
        if [[ -n "${picurl}" ]]; then
            echo "${picurl}" | tee "${CACHE}"
        else
            if [[ -s "$CACHE" ]]; then
                cat "${CACHE}"
            else
                touch "${CACHE}"
            fi
        fi
        flock -u 200 >/dev/null 2>&1
    elif [[ -s "${CACHE}" ]]; then
        cat "${CACHE}"
    fi
}

function get_url() {
    if [[ -f "${CACHE}" ]]; then
        local idle_t=$(($(date '+%s') - $(date -r "${CACHE}" '+%s' 2>/dev/null || echo '0')))
        if [[ -s "${CACHE}" ]]; then
            if [[ ${idle_t} -le 43200 ]]; then
                cat "${CACHE}"
                return
            fi
        else
            if [[ ${idle_t} -le 120 ]]; then
                return
            fi
        fi
    fi
    try_update
}

function get_wallpaper() {
    declare img_url
    img_url="${1}"
    
    if [[ "${img_url}" != "" ]]; then
        rm -rf ${BACKGROUND_IMG_PATH}/bg.jpg
        curl -fks --max-time ${CURL_MAXTIME} --url "$(echo "${img_url}" | sed 's/^\/\///g')" -o ${BACKGROUND_IMG_PATH}/bg.jpg
    fi
}

function get_wallpaper_proc() {
    declare img_url
    img_url="${1}"

    declare now_time
    now_time="$(date +%s)"

    if [[ ! -f ${REFRESH_INTERVAL_FLAG_F} ]]; then
        echo "${now_time}" > "${REFRESH_INTERVAL_FLAG_F}"
    fi

    declare last_time
    last_time="$(cat ${REFRESH_INTERVAL_FLAG_F})"

    declare interval_sec_time
    interval_sec_time="$((now_time - last_time))"

    if [[ ${interval_sec_time} -ge ${REFRESH_INTERVAL_SEC} ]] || 
       [[ ${MAST_REFRESH_FLAG} -eq 1 ]]; then
        get_wallpaper "${img_url}"
        echo "${now_time}" > "${REFRESH_INTERVAL_FLAG_F}"
    fi

    cat "${CACHE}"
}

function main() {
    if [[ ! -f "${CACHE}" ]]; then
        MAST_REFRESH_FLAG=1
    fi
    declare img_url
    img_url="$(get_url)"

    get_wallpaper_proc "${img_url}"
}

main "${@}"
exit $?

